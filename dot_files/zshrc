# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  gitfast
  fzf
  autojump
  zsh-autosuggestions
  zsh-syntax-highlighting
  kubectl
  kustomize
  terraform
  aws
  terragrunt
  helm
  docker
  docker-compose
)

source $ZSH/oh-my-zsh.sh

#--------------------#
# User configuration #
#--------------------#

# Some paths
export PATH=$PATH:$HOME/.local/bin
export PATH=$PATH:/usr/local/go/bin
export PATH=$PATH:$HOME/go/bin
export PATH=$PATH:$HOME/.local/google-cloud-sdk/bin
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

# https://askubuntu.com/questions/979343/zsh-would-auto-print-the-command-i-type
export TERM=xterm-256color

# Clear the screen before each command
clear-accept-line(){
  clear -x
  echo
  zle .accept-line
}
zle -N accept-line clear-accept-line

# Preferred editor for local and remote sessions
export EDITOR='vim'

# https://github.com/zsh-users/zsh-autosuggestions/issues/532
bindkey '^I'   complete-word       # tab          | complete
bindkey '^[[Z' autosuggest-accept  # shift + tab  | autosuggest
ZSH_AUTOSUGGEST_CLEAR_WIDGETS+=(buffer-empty bracketed-paste accept-line push-line-or-edit)
ZSH_AUTOSUGGEST_STRATEGY=(history completion)
ZSH_AUTOSUGGEST_USE_ASYNC=true

# Fix slowness of pastes with zsh-syntax-highlighting.zsh
# https://github.com/vercel/hyper/issues/1276#issuecomment-603641968
pasteinit() {
  OLD_SELF_INSERT=${${(s.:.)widgets[self-insert]}[2,3]}
  zle -N self-insert url-quote-magic # I wonder if you'd need `.url-quote-magic`?
}
pastefinish() {
  zle -N self-insert $OLD_SELF_INSERT
}
zstyle :bracketed-paste-magic paste-init pasteinit
zstyle :bracketed-paste-magic paste-finish pastefinish

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.

alias gca='git add --all && git commit --verbose'
alias pip='python3 -m pip'
alias pip3='python3 -m pip'
alias vimg='vim +RooterToggle'
alias vim_update='vim +"PlugInstall --sync" +qa'
alias watch='watch --color ' # https://unix.stackexchange.com/a/25329
alias ls='eza --icons --long --binary --modified --no-permissions --no-user'
alias la='ls --all'
alias lt='ls --tree'
alias tfi='terraform init'
alias tfp='terraform plan'
alias tfa='terraform apply'
alias tfd='terraform destroy'
alias tgi='terragrunt init'
alias tgp='terragrunt plan'
alias tga='terragrunt apply'
alias tgd='terragrunt destroy'
alias kgpa="kubectl get pods -A --sort-by '{.metadata.namespace}'"
alias klogsall="kubectl get pods --no-headers | awk '{print \$1}' | xargs -n1 -I{} sh -c 'kubectl logs --timestamps --all-containers {} > {}.log'"
alias kt='kubectl top'
alias ktno='kubectl view-utilization -h node'
alias ktns='kubectl view-utilization -h namespace'
alias ktp='kubectl top pod'
alias ktpa='kubectl top pod -A'
alias kgno='kubectl get node -L node.kubernetes.io/instance-type -L topology.kubernetes.io/zone'
alias kge="kubectl get events --sort-by='.lastTimestamp'"
alias kak='kubectl apply -k'
alias krr='kubectl rollout restart'
alias krrd='kubectl rollout restart deployment'
alias passgen="xkcdpass --delimiter='.' --count=1 --numwords=5"

kgsecy(){
  kgsec ${@:1} -o json | jq '.data |= map_values(@base64d)' | yq -P
}

kgcjy() {
  kgcj "${@:1}" -o yaml | yq -P
}

kgcmy() {
  kgcm "${@:1}" -o yaml | yq -P
}

kgdy() {
  kgd "${@:1}" -o yaml | yq -P
}

kgdsy() {
  kgds "${@:1}" -o yaml | yq -P
}

kgey() {
  kge "${@:1}" -o yaml | yq -P
}

kgiy() {
  kgi "${@:1}" -o yaml | yq -P
}

kgjy() {
  kgj "${@:1}" -o yaml | yq -P
}

kgnoy() {
  kgno "${@:1}" -o yaml | yq -P
}

kgnsy() {
  kgns "${@:1}" -o yaml | yq -P
}

kgpy() {
  kgp "${@:1}" -o yaml | yq -P
}

kgpay() {
  kgpa "${@:1}" -o yaml | yq -P
}

kgpvcy() {
  kgpvc "${@:1}" -o yaml | yq -P
}

kgrsy() {
  kgrs "${@:1}" -o yaml | yq -P
}

kgsy() {
  kgs "${@:1}" -o yaml | yq -P
}

kgssy() {
  kgss "${@:1}" -o yaml | yq -P
}


count(){
  cat $1 | wc -l
}

cln(){
  awk "{print \$$1}"
}

# Change kubernetes context namespace
kn(){
  if [[ $1 == "" ]]; then
    kubectl get namespaces
  else
    kubectl config set-context --current --namespace="$1"
    kubectl config get-contexts
  fi
}

jwt_decode(){
  jq -R 'split(".") | select(length > 0) | .[0],.[1] | @base64d | fromjson' <<< $1
}

catall(){
  more * | cat
}

cdr(){
  cd $(git rev-parse --show-toplevel)
}

stress(){
  while true; do
    curl -sk $1
    echo
    if [[ -v $2 ]]; then
      sleep $2
    fi
  done
}

cert(){
  echo | openssl s_client -showcerts -servername $1 -connect $1:443 2>/dev/null | openssl x509 -inform pem -text
}

ai(){
  case $1 in

    cmd)
      __ai_cmd ${@:2}
      ;;

    explain)
      __ai_explain ${@:2} | mdrender
      ;;

    git)
      __ai_git ${@:2}
      ;;

    think)
      llm ${@:2} -m 'gpt-oss:20b'
      ;;

    *)
      llm $@ -m 'gemma3:4b'
      ;;

  esac
}

__ai_cmd(){
  llm_system_prompt='
    Reasoning: low. Do not over think it.

    Return the command to be executed as a raw string on the last line, no string delimiters wrapping it, no yapping, no markdown, no fenced code blocks, what you return will be passed to subprocess.check_output() directly.

    For example, if the user asks: undo last git commit

    You return only: git reset --soft HEAD~1
  '
  llm_cmd_out=$(ai think cmdcomp -s "$llm_system_prompt" $@)
  if [[ -n "$llm_cmd_out" ]]; then
    print -z "$llm_cmd_out"
  fi
}

__ai_explain(){
  llm_system_prompt='
    Provide an in-depth explanation of the file or files provided
    (if there is multiple files they will be separated by triple-dash --- blocks)
  '
  ai -s "$llm_system_prompt" $@
}

__ai_git() {
  local files_filter='*'      # default: include everything
  local render_output='true' # default: true. define if output will be rendered with mdrender
  local llm_system_prompt     # required system prompt
  # Argument parsing
  case $# in
    1)  # only a prompt â€“ use default filter
        llm_system_prompt=$1
        ;;
    2)  # filter and prompt
        files_filter=$1
        llm_system_prompt=$2
        ;;
    *)  # anything else is a usage error
        printf 'Usage: %s <prompt> OR %s <filter> <prompt>\n' "$0" "$0" >&2
        return 1
        ;;
  esac
  # Handle system prompt special case
  if [[ "$llm_system_prompt" == "explain" ]]; then
    llm_system_prompt='
      The prompt provided is a git repository, each file is separated by triple-dash blocks.
      Provide a summary of the whole project and a consise explanation for each file.
    '
  fi
  # Build the prompt from the repository files
  local input
  if ! input=$(git ls-files "$files_filter" | files-to-prompt); then
    printf 'ERROR: Failed to generate prompt from repository files\n' >&2
    return 1
  fi
  # Count tokens and guard against the 128kâ€‘token limit
  local token_count
  if ! token_count=$(token-count -m gpt-4o -f <(echo "$input")); then
    printf 'ERROR: Failed to count tokens\n' >&2
    return 1
  fi
  if (( token_count > 128000 )); then
    printf 'ERROR: Input is bigger than 128k tokens. Add or fineâ€‘tune your filter\n' >&2
    return 1
  fi
  # Send the prompt to the LLM
  if [[ "$render_output" == "true" ]]; then
    printf '%s' "$input" | ai -s "$llm_system_prompt" | mdrender
  else
    printf '%s' "$input" | ai -s "$llm_system_prompt"
  fi
}

# Enable mouse support for less
export LESS='--mouse --wheel-lines=2'

# Some FZF stuff, honestly I don't remember why this is here lmao
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
ZLE_RPROMPT_INDENT=0
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# add Pulumi to the PATH
export PATH=$PATH:$HOME/.pulumi/bin

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Completion
fpath=($fpath ~/.zsh/completion)
autoload -U compinit
compinit

# Working profile management
source ~/.workprofile.zshrc
